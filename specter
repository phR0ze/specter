#!/usr/bin/env bash

# MIT License
# Copyright (c) 2024 phR0ze
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
set -e

none="\e[m"
red="\e[1;31m"
dred="\e[31m"
green="\e[1;32m"
dgreen="\e[32m"
yellow="\e[1;33m"
orange="\e[33m"
violet="\e[1;34m"
purple="\e[35m"
magenta="\e[1;35m"
aqua="\e[36m"
cyan="\e[1;36m"

SCRIPT=$(basename $0)
SCRIPT_DIR=$(readlink -f $(dirname $BASH_SOURCE[0]))

core::title()
{
    VERSION=0.0.1
    echo -e "${cyan}specter v${VERSION}${none}"
}

core::usage()
{
    core::title
    cat <<USAGE
Usage:
  ./specter [OPTIONS] [COMMAND] [ARGS...]

Options:
  --dryrun          Don't perform any operations just print out results
  -h, --help        Print out top level usage

Commands:
  exif IN OUT       Move all files in IN to OUT based on the exif create date
USAGE

    echo -e "\nExamples:"
    echo -e "  ${green}Search:${none} ./${SCRIPT} search IN OUT"
    echo
    exit
}

exif::run()
{
    # Ensure the right arguments count was passed
    [ ${#ARGS[@]} -lt 2 ] && core::usage

    local src="${ARGS[0]%/}" # trim off any trailing slash
    local dst="${ARGS[1]%/}" # trim off any trailing slash
    if [[ "$dst" == "" ]]; then
        echo -e "${red}Error${none}: Destination directory not given\n"
        core::usage
    fi

    echo -e "Moving from ${cyan}${src}${none} to ${cyan}${dst}${none}"

    find "$src" -maxdepth 1 -type f | while read x; do
        
        # Get the file's exif data
        local src_dir="$(basename "$(dirname "$x")")"
        local filename="$src_dir/$(basename "$x")"
        # grep ... // Catch the line for 'Create Date'
        # head ... // Ensures only first line is used
        # sed ...  // Trims out the year and month, first '2011:06' and second '06.12.2011'
        local create=$(exiftool "$x" | grep "^Create" | head -1 | sed -ne 's|.*\([0-9]\{4\}:[0-9]\{2\}\).*|\1|p')
        if [[ "$create" == "" ]]; then
            create=$(exiftool "$x" | grep "^Create" | head -1 | sed -ne 's|.* \([0-9]\{2\}\).*\([0-9]\{4\}\).*|\2:\1|p')
        fi

        # Grabs the year only e.g. 2011
        local year="${create%%:*}"
        # Grabs the month only e.g. 06
        local month="${create#*:}"

        # Skip files that don't have a valid date
        if [[ "$year" == "" || "$year" == "0000" ]]; then
            continue
        fi

        # Ensure the destination directory exists
        local dst_dir="$dst/$year/$year.$month"
        #if [[ "$year" > "2000" ]]; then
            echo "$filename => $dst_dir"
            if [ $DRYRUN -eq 0 ]; then
                mkdir -p "$dst_dir"
                mv "$x" "$dst_dir"
            fi
        #fi
    done
}
 
# Parse commands
# --------------------------------------------------------------------------------------------------
[[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] && core::usage

# Process global flags
CMD="$1"
DRYRUN=0
ARGS=()
for x in "$@"; do
    [[ "$x" == "$1" ]] && continue
    [[ "$x" == "--dryrun" ]] && DRYRUN=1 && continue
    ARGS+=("$x")
done

# Process the command
case "${CMD}" in
    exif) exif::run ;;
    *) echo -e "${red}Invalid command:${none} ${cyan}${command}${none}\n"; core::usage ;;
esac

